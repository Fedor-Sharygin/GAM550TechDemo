#pragma once

#ifndef _PARTICLE_EMITTER_H_
#define _PARTICLE_EMITTER_H_

#include "..//Component.h"


struct Particle;

class GraphicsManager;
class AssetManager;

class ParticleEmitter : public Component
{
public:
	ParticleEmitter();
	virtual ~ParticleEmitter();

	virtual void Update(float dt) override;
	virtual void FrameStart() override;
	virtual void FrameEnd() override;

	virtual void Initialize() override;
	virtual void End() override;

	virtual void HandleEvent(Event* nEvent) override;

	void SetAmount(unsigned int nAmount);
	void LoadTexture(std::string nName);

	void Draw();

	void PassDrawer(GraphicsManager* nDrawer);
	void PassLoader(AssetManager* nLoader);

	/// generates a certain amount of particles
	void GenerateParticles(unsigned int newAmount, glm::vec3 offset, unsigned int frCount);
public:
private:
	/// returns the first Particle index that's currently unused
	/// e.g. Life <= 0.0f or 0 if no particle is currently inactive
	unsigned int FirstUnusedParticle();

	/// respawns particle
	void RespawnParticle(Particle* nParticle, glm::vec3 offset, unsigned int frCount);
private:
	std::string textureName;
	unsigned int particleTexture;
	std::vector<Particle*> particles;
	unsigned int partVAO;

	/// how many particles can at most exist
	/// generated by this emitter
	unsigned int maxParticleAmount;
	unsigned int lastUsedParticle;

	GraphicsManager* drawer;
	AssetManager* loader;
};


#endif

